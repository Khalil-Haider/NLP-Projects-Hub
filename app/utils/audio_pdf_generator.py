# Directory structure:
# app/
# â”œâ”€â”€ Home.py
# â”œâ”€â”€ utils/
# â”‚   â”œâ”€â”€ __init__.py
# â”‚   â”œâ”€â”€ audio_pdf_genrator.py
# â”‚   â””â”€â”€ audio_processor.py
# â”‚   â””â”€â”€ text_processor.py
# â”‚   â””â”€â”€ rag_processor.py
# â”‚   â”œâ”€â”€ video_processor.py
# â”‚   â”œâ”€â”€ video_to_pdf.py
# â”œâ”€â”€ pages/
# â”‚   â”œâ”€â”€ 1_ðŸŽ¥_Video_to_Audio.py
# â”‚   â”œâ”€â”€ 2_ðŸŽ¥_Video_to_Text.py
# â”‚   â”œâ”€â”€ 3_ðŸŽ§_Audio_to_Text.py
# â”‚   â”œâ”€â”€ 4_ðŸ’¬_Chat_with_Video.py
# â”‚   â”œâ”€â”€ 5_ðŸ’¬_Chat_with_Audio.py
# â”‚   â””â”€â”€ 6_ðŸ’¬_Chat_with_Documents.py
# â””â”€â”€ assets/
#     â””â”€â”€ style.css

# utils/audio_pdf_generator.py
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from pypdf import PdfWriter, PdfReader

class AudioToPDFConverter:
    """Utility class for generating PDFs from text."""

    @staticmethod
    def generate_pdf(text: str) -> bytes:
        """Generate a PDF from the given text."""
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter

        # Split text into lines and write to PDF
        y = height - 50
        words = text.split()
        current_line = []

        for word in words:
            current_line.append(word)
            if c.stringWidth(' '.join(current_line), 'Helvetica', 12) > width - 100:
                current_line.pop()
                line_text = ' '.join(current_line)
                if y < 50:
                    c.showPage()
                    y = height - 50
                c.drawString(50, y, line_text)
                y -= 15
                current_line = [word]

        if current_line:
            line_text = ' '.join(current_line)
            if y < 50:
                c.showPage()
                y = height - 50
            c.drawString(50, y, line_text)

        c.save()
        buffer.seek(0)

        output_buffer = BytesIO()
        pdf_writer = PdfWriter()
        pdf_reader = PdfReader(buffer)
        for page in pdf_reader.pages:
            pdf_writer.add_page(page)

        pdf_writer.write(output_buffer)
        output_buffer.seek(0)
        return output_buffer.getvalue()
